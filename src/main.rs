use triton_grow::{network::{network::Network, activations::Activations, layer::layers::LayerTypes, input::*, matrix::Matrix, matrix3d::Matrix3D}, helper::{categorical::to_categorical, mnist::MnistEntry}};

#[tokio::main]
async fn main() {
    //Convolutional Example
    /*
    let mut inputs: Vec<&dyn Input> = vec![];
    let outputs: Vec<Vec<f32>>;
    let mut true_outputs: Vec<Vec<f32>> = vec![];

    let inputs_undyn: Vec<Matrix>;
    let outputs_uncat: Vec<usize>;

    println!("Generating MNIST....");
    (inputs_undyn, outputs_uncat) = MnistEntry::generate_mnist();
    println!("Done Generating MNIST");

    outputs = to_categorical(outputs_uncat);
    for i in 0..500{
        inputs.push(&inputs_undyn[i]);
        true_outputs.push(outputs[i].clone());
    }

    let mut network = Network::new(10);

    network.add_layer(LayerTypes::DENSE(784, Activations::RELU, 0.1));
    network.add_layer(LayerTypes::DENSE(64, Activations::RELU, 0.1));
    network.add_layer(LayerTypes::DENSE(32, Activations::RELU, 0.1));
    network.add_layer(LayerTypes::DENSE(10, Activations::SOFTMAX, 0.1));

    

    network.compile();

    network.fit_minibatch(&inputs, &true_outputs, 1000).await;
    for i in 0..10{
        println!("predicted: {:?} \n\n actual: {:?}\n", network.predict(inputs[i]), true_outputs[i]);
    }
    network.save("mnist_weight_check.json");*/
    //Dense Example
    /*
    let mut inputs: Vec<&dyn Input> = vec![];
    let input_1 = vec![1.0,1.0];
    let input_2 = vec![vec![0.0], vec![1.0]];
    let input_3 = Matrix::from(vec![vec![1.0],vec![0.0]]);
    let input_4 = Matrix3D::from(vec![vec![vec![0.0,0.0]]]);
    inputs.push(&input_1);
    inputs.push(&input_2);
    inputs.push(&input_3);
    inputs.push(&input_4);
    
    let outputs: Vec<Vec<f32>> = vec![vec![0.0],vec![1.0],vec![1.0], vec![0.0]];

    let mut new_net = Network::new(4);

    new_net.add_layer(LayerTypes::DENSE(2, Activations::SIGMOID, 0.0001));
    new_net.add_layer(LayerTypes::DENSE(3, Activations::SIGMOID, 0.0001));
    new_net.add_layer(LayerTypes::DENSE(1, Activations::SIGMOID, 0.0001));

    new_net.compile();

    new_net.fit_minibatch(&inputs, &outputs, 200).await;
    */
    //new_net.fit(&inputs, &outputs, 100);
    let mut data = vec![167, 106, 98, 97, 116, 99, 104, 95, 115, 105, 122, 101, 4, 107, 108, 97, 121, 101, 114, 95, 115, 105, 122, 101, 115, 131, 2, 3, 1, 100, 108, 111, 115, 115, 249, 60, 0, 106, 108, 111, 115, 115, 95, 116, 114, 97, 105, 110, 128, 102, 108, 97, 121, 101, 114, 115, 131, 161, 101, 68, 101, 110, 115, 101, 174, 103, 119, 101, 105, 103, 104, 116, 115, 163, 100, 114, 111, 119, 115, 3, 103, 99, 111, 108, 117, 109, 110, 115, 2, 100, 100, 97, 116, 97, 131, 130, 250, 192, 241, 233, 78, 250, 192, 216, 131, 175, 130, 250, 63, 228, 77, 154, 250, 63, 228, 27, 24, 130, 250, 192, 177, 245, 244, 250, 192, 192, 231, 125, 102, 98, 105, 97, 115, 101, 115, 163, 100, 114, 111, 119, 115, 3, 103, 99, 111, 108, 117, 109, 110, 115, 1, 100, 100, 97, 116, 97, 131, 129, 250, 192, 88, 207, 215, 129, 250, 192, 204, 12, 156, 129, 250, 192, 201, 18, 138, 100, 100, 97, 116, 97, 163, 100, 114, 111, 119, 115, 3, 103, 99, 111, 108, 117, 109, 110, 115, 1, 100, 100, 97, 116, 97, 131, 129, 250, 61, 5, 222, 35, 129, 250, 58, 222, 147, 42, 129, 250, 58, 244, 59, 188, 100, 108, 111, 115, 115, 249, 60, 0, 109, 97, 99, 116, 105, 118, 97, 116, 105, 111, 110, 95, 102, 110, 103, 83, 73, 71, 77, 79, 73, 68, 109, 108, 101, 97, 114, 110, 105, 110, 103, 95, 114, 97, 116, 101, 250, 56, 209, 183, 23, 101, 98, 101, 116, 97, 49, 250, 63, 102, 102, 102, 101, 98, 101, 116, 97, 50, 250, 63, 127, 190, 119, 103, 101, 112, 115, 105, 108, 111, 110, 250, 46, 219, 230, 255, 100, 116, 105, 109, 101, 24, 201, 105, 109, 95, 119, 101, 105, 103, 104, 116, 115, 163, 100, 114, 111, 119, 115, 3, 103, 99, 111, 108, 117, 109, 110, 115, 2, 100, 100, 97, 116, 97, 131, 130, 250, 184, 153, 139, 171, 250, 184, 156, 99, 168, 130, 250, 184, 36, 195, 122, 250, 184, 40, 38, 43, 130, 250, 184, 3, 143, 5, 250, 184, 5, 250, 29, 105, 118, 95, 119, 101, 105, 103, 104, 116, 115, 163, 100, 114, 111, 119, 115, 3, 103, 99, 111, 108, 117, 109, 110, 115, 2, 100, 100, 97, 116, 97, 131, 130, 250, 53, 216, 166, 130, 250, 53, 216, 54, 229, 130, 250, 53, 147, 77, 60, 250, 53, 147, 45, 143, 130, 250, 53, 20, 39, 99,
250, 53, 19, 251, 211, 104, 109, 95, 98, 105, 97, 115, 101, 115, 163, 100, 114, 111, 119, 115, 3, 103, 99, 111, 108, 117, 109, 110, 115, 1, 100, 100, 97, 116, 97, 131, 129, 250, 56, 57, 202, 85, 129, 250, 55, 208, 9, 102, 129, 250, 55, 126, 76, 92, 104, 118, 95, 98, 105, 97, 115, 101, 115, 163, 100, 114, 111, 119, 115, 3, 103, 99, 111, 108, 117, 109, 110, 115, 1, 100, 100, 97, 116, 97, 131, 129, 250, 54, 169, 167, 222, 129, 250, 54, 105, 238, 133, 129, 250, 53, 235, 15, 208, 161, 101, 68, 101, 110, 115, 101, 174, 103, 119, 101, 105, 103, 104, 116, 115, 163, 100, 114, 111, 119, 115, 1, 103, 99, 111, 108, 117, 109, 110, 115, 3, 100, 100, 97, 116, 97, 129, 131, 250, 66, 95, 83, 132, 250, 66, 5, 12, 170, 250, 65, 190, 43, 139, 102, 98, 105, 97, 115, 101, 115, 163, 100, 114, 111, 119, 115, 1, 103, 99, 111, 108, 117, 109, 110, 115, 1, 100, 100, 97,
116, 97, 129, 129, 250, 192, 59, 52, 237, 100, 100, 97, 116, 97, 163, 100, 114, 111, 119, 115, 1, 103, 99, 111, 108, 117, 109, 110, 115, 1, 100, 100, 97, 116, 97, 129, 129, 250, 62, 137, 188, 188, 100, 108, 111, 115, 115, 249, 60, 0, 109, 97, 99, 116, 105, 118, 97, 116, 105, 111, 110, 95, 102, 110, 103, 83, 73, 71, 77, 79, 73, 68, 109, 108, 101, 97, 114, 110, 105, 110, 103, 95, 114, 97, 116, 101, 250, 56, 209, 183, 23, 101, 98, 101, 116, 97, 49, 250, 63, 102, 102, 102, 101, 98, 101, 116, 97, 50, 250, 63, 127, 190, 119, 103, 101, 112, 115, 105, 108, 111, 110, 250, 46, 219, 230, 255, 100, 116, 105, 109, 101, 24, 201, 105, 109, 95, 119, 101, 105, 103, 104, 116, 115, 163, 100, 114, 111, 119, 115, 1, 103, 99, 111, 108, 117, 109, 110, 115, 3, 100, 100, 97, 116, 97, 129, 131, 250, 52, 201, 92, 133, 250, 52, 146, 59, 171, 250, 50, 186, 226, 197, 105,
118, 95, 119, 101, 105, 103, 104, 116, 115, 163, 100, 114, 111, 119, 115, 1, 103, 99, 111, 108, 117, 109, 110, 115, 3, 100, 100, 97, 116, 97, 129, 131, 250, 44, 145, 3, 177, 250, 44, 111, 102, 104, 250, 44, 1, 240, 93, 104, 109, 95, 98, 105, 97, 115, 101, 115, 163, 100, 114, 111, 119, 115, 1, 103, 99, 111, 108, 117, 109, 110, 115, 1, 100, 100, 97, 116, 97, 129, 129, 250, 54, 14, 26, 189, 104, 118, 95, 98, 105, 97, 115, 101, 115, 163, 100, 114, 111, 119, 115, 1, 103, 99, 111, 108, 117, 109, 110, 115, 1, 100,
100, 97, 116, 97, 129, 129, 250, 49, 143, 102, 104, 161, 101, 68, 101, 110, 115, 101, 174, 103, 119, 101, 105, 103, 104, 116, 115, 163, 100, 114, 111, 119, 115, 1, 103, 99, 111, 108, 117, 109, 110, 115, 1, 100, 100, 97, 116, 97, 129, 129, 250, 194, 56, 129, 58, 102, 98, 105, 97, 115, 101, 115, 163, 100, 114, 111, 119, 115, 1, 103, 99, 111,
108, 117, 109, 110, 115, 1, 100, 100, 97, 116, 97, 129, 129, 250, 64, 242, 61, 134, 100, 100, 97, 116, 97, 163, 100, 114, 111, 119, 115, 1, 103, 99, 111, 108, 117, 109, 110, 115, 1, 100, 100, 97, 116, 97, 129, 129, 250, 60, 0, 176, 153, 100, 108, 111, 115, 115, 249, 60, 0, 109, 97, 99, 116, 105, 118, 97, 116, 105, 111, 110, 95, 102, 110, 103, 83, 73, 71, 77, 79, 73, 68, 109, 108, 101, 97, 114, 110, 105, 110, 103, 95, 114, 97, 116, 101, 250, 56, 209, 183, 23, 101, 98, 101, 116, 97, 49, 250, 63, 102, 102, 102, 101, 98, 101, 116, 97, 50, 250, 63, 127, 190, 119, 103, 101, 112, 115, 105, 108, 111, 110, 250, 46, 219, 230, 255, 100, 116, 105, 109, 101, 24, 201, 105, 109, 95, 119, 101, 105, 103, 104, 116, 115, 163, 100, 114, 111, 119, 115, 1, 103, 99, 111, 108, 117, 109, 110, 115, 1, 100, 100, 97, 116, 97, 129, 129, 250, 179, 118, 129, 33, 105, 118, 95, 119, 101, 105, 103, 104, 116, 115, 163, 100, 114, 111, 119, 115, 1, 103, 99, 111, 108, 117, 109, 110, 115, 1, 100, 100, 97, 116, 97, 129, 129, 250, 41, 157, 99, 167, 104, 109, 95, 98, 105, 97, 115, 101, 115, 163, 100, 114, 111, 119, 115, 1, 103, 99, 111, 108, 117, 109, 110, 115, 1, 100, 100, 97, 116, 97, 129, 129, 250, 52, 26, 50, 215, 104, 118, 95, 98, 105, 97, 115, 101, 115, 163, 100, 114, 111, 119, 115, 1, 103, 99, 111, 108, 117, 109, 110, 115, 1, 100, 100, 97, 116, 97, 129, 129, 250, 44, 232, 45, 166, 113, 117, 110, 99, 111, 109, 112, 105, 108, 101, 100, 95, 108, 97, 121, 101, 114, 115, 131, 161, 101, 68, 69, 78, 83, 69, 131, 2, 103, 83, 73, 71, 77, 79, 73, 68, 250, 56, 209, 183, 23, 161, 101, 68, 69, 78, 83, 69, 131, 3, 103, 83, 73, 71, 77, 79, 73, 68, 250, 56, 209, 183, 23, 161, 101, 68, 69, 78, 83, 69, 131, 1, 103, 83, 73, 71, 77, 79, 73, 68, 250, 56, 209, 183, 23, 100, 115, 101, 101, 100, 246];
    let mut new_net = Network::from_vec(data).unwrap();
    println!("1 and 0: {:?}", new_net.predict(&vec![1.0,0.0])[0]);
    println!("0 and 1: {:?}", new_net.predict(&vec![0.0,1.0])[0]);
    println!("1 and 1: {:?}", new_net.predict(&vec![1.0,1.0])[0]);
    println!("0 and 0: {:?}", new_net.predict(&vec![0.0,0.0])[0]);
}
